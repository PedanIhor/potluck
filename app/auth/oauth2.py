from fastapi.security import OAuth2PasswordBearer
from typing import Optional
from datetime import datetime, timedelta
from jose import jwt
from jose.exceptions import JWTError
from sqlalchemy.orm import Session
from app.db.database import get_db
from fastapi import HTTPException, status, Depends
from app.db import db_user

oauth2_scheme = OAuth2PasswordBearer(tokenUrl="token")

# Key generated by command:
# openssl rand -hex 32
SECRET_KEY = '7f910a4be7e1e86ea36a8cb2319c4f9b093d409b49a0e2760d70b34f80bfb460'
ALGORITHM = 'HS256'
ACCESS_TOKEN_EXPIRE_MINUTES = 30


class CurrentUser:
    id: int
    admin: bool
    email: str

    def __init__(self, id: int, admin: bool, email: str):
        self.id = id
        self.admin = admin
        self.email = email


def create_access_token(data: dict, expires_delta: Optional[timedelta] = None):
    to_encode = data.copy()
    if expires_delta:
        expire = datetime.now() + expires_delta
    else:
        expire = datetime.now() + timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)
    to_encode.update({"exp": expire})
    encoded_jwt = jwt.encode(to_encode, key=SECRET_KEY, algorithm=ALGORITHM)
    return encoded_jwt


def get_current_user(token: str = Depends(oauth2_scheme), db: Session = Depends(get_db)):
    credentials_exception = HTTPException(
        status_code=status.HTTP_401_UNAUTHORIZED,
        detail='Could not validate credentials',
        headers={"WWW-Authenticate": "Bearer"}
    )
    try:
        payload = jwt.decode(token=token, key=SECRET_KEY, algorithms=[ALGORITHM])
        user_id: int = payload.get('sub')
        if user_id is None:
            raise credentials_exception
    except JWTError:
        raise credentials_exception

    user = db_user.get_user_by_id(db, user_id)

    if user is None:
        raise credentials_exception

    return CurrentUser(
        user.id,
        user.is_superuser,
        user.email
    )
